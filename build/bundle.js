"use strict";angular.module("memry",["ngRoute"]),angular.module("memry").config(["$routeProvider",function(e){e.when("/",{templateUrl:"views/main.html"})}]),angular.module("memry").controller("DefinitionFormController",["$scope","defModel",function(e,t){e.hideDescription=!0,e.titleChange=function(){var n=t.findIDByTitleSubstr(e.title);e.hideDescription=n||""===e.title},e.titleInputBegin=function(){},e.titleInputEnd=function(){},e.addDefinition=function(){e.title&&e.description&&(t.addDefinition(e.title,e.description),e.title="",e.description="",e.hideDescription=!0)}}]),angular.module("memry").controller("DefinitionListController",["$scope","defModel",function(e,t){t.getDefs().then(function(t){e.definitions=t.data}),e.turnOnEditMode=function(t){e.definitions.forEach(function(e){e.editMode=!1}),e.definitions[t].editMode=!0},e.turnOffEditMode=function(t){e.definitions[t].editMode=!1},e.editDefinition=function(n,i){e.turnOffEditMode(n),t.editDefinition(i)},e.delDefinition=function(e){t.deleteDefinition(e)}}]),angular.module("memry").controller("MainController",function(){}),angular.module("memry").factory("defModel",["$q","defServer",function(e,t){function n(){t.getAll().then(function(e){o.defs=e.data})}var i={},o={};return i.getDefs=function(){var e=t.getAll();return e.then(function(e){o.defs=e.data}),e},i.addDefinition=function(e,n){t.create({title:e,description:n}).then(function(e){console.log(e.data),i.getDefs()})},i.editDefinition=function(e){t.update(e).then(function(e){console.log(e.data),i.getDefs()})},i.deleteDefinition=function(e){t.delete(e).then(function(e){console.log(e.data),i.getDefs()})},i.findIDByTitleSubstr=function(e){if("string"!=typeof e)throw new Error("findIDByTitleSubstr requires string input");var t=null;return o.defs.forEach(function(n){var i=n.title.indexOf(e);return 0===i?(t=n._id,!0):void 0}),t},n(),i}]),angular.module("memry").factory("defServer",["$http",function(e){return{getAll:function(){return e.get("/api/defs")},getOne:function(t){return e.get("/api/defs/"+t)},create:function(t){return e.post("/api/defs",t)},update:function(t){return e.put("/api/defs/"+t._id,t)},"delete":function(t){return e.delete("/api/defs/"+t)}}}]);
//# sourceMappingURL=data:application/json;base64,