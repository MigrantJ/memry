var duScrollDefaultEasing=function(e){"use strict";return.5>e?Math.pow(2*e,2)/2:1-Math.pow(2*(1-e),2)/2};angular.module("duScroll",["duScroll.scrollspy","duScroll.smoothScroll","duScroll.scrollContainer","duScroll.spyContext","duScroll.scrollHelpers"]).value("duScrollDuration",350).value("duScrollSpyWait",100).value("duScrollGreedy",!1).value("duScrollOffset",0).value("duScrollEasing",duScrollDefaultEasing),angular.module("duScroll.scrollHelpers",["duScroll.requestAnimation"]).run(["$window","$q","cancelAnimation","requestAnimation","duScrollEasing","duScrollDuration","duScrollOffset",function(e,t,n,r,o,l,i){"use strict";var u={},c=function(e){return"undefined"!=typeof HTMLDocument&&e instanceof HTMLDocument||e.nodeType&&e.nodeType===e.DOCUMENT_NODE},a=function(e){return"undefined"!=typeof HTMLElement&&e instanceof HTMLElement||e.nodeType&&e.nodeType===e.ELEMENT_NODE},d=function(e){return a(e)||c(e)?e:e[0]};u.duScrollTo=function(t,n,r){var o;if(angular.isElement(t)?o=this.duScrollToElement:r&&(o=this.duScrollToAnimated),o)return o.apply(this,arguments);var l=d(this);return c(l)?e.scrollTo(t,n):(l.scrollLeft=t,void(l.scrollTop=n))};var s,f;u.duScrollToAnimated=function(e,l,i,u){i&&!u&&(u=o);var c=this.duScrollLeft(),a=this.duScrollTop(),d=Math.round(e-c),p=Math.round(l-a),m=null,g=this,S="scroll mousedown mousewheel touchmove keydown",y=function(e){(!e||e.which>0)&&(g.unbind(S,y),n(s),f.reject(),s=null)};if(s&&y(),f=t.defer(),!d&&!p)return f.resolve(),f.promise;var h=function(e){null===m&&(m=e);var t=e-m,n=t>=i?1:u(t/i);g.scrollTo(c+Math.ceil(d*n),a+Math.ceil(p*n)),1>n?s=r(h):(g.unbind(S,y),s=null,f.resolve())};return g.duScrollTo(c,a),g.bind(S,y),s=r(h),f.promise},u.duScrollToElement=function(e,t,n,r){var o=d(this);(!angular.isNumber(t)||isNaN(t))&&(t=i);var l=this.duScrollTop()+d(e).getBoundingClientRect().top-t;return a(o)&&(l-=o.getBoundingClientRect().top),this.duScrollTo(0,l,n,r)},u.duScrollLeft=function(t,n,r){if(angular.isNumber(t))return this.duScrollTo(t,this.duScrollTop(),n,r);var o=d(this);return c(o)?e.scrollX||document.documentElement.scrollLeft||document.body.scrollLeft:o.scrollLeft},u.duScrollTop=function(t,n,r){if(angular.isNumber(t))return this.duScrollTo(this.duScrollLeft(),t,n,r);var o=d(this);return c(o)?e.scrollY||document.documentElement.scrollTop||document.body.scrollTop:o.scrollTop},u.duScrollToElementAnimated=function(e,t,n,r){return this.duScrollToElement(e,t,n||l,r)},u.duScrollTopAnimated=function(e,t,n){return this.duScrollTop(e,t||l,n)},u.duScrollLeftAnimated=function(e,t,n){return this.duScrollLeft(e,t||l,n)},angular.forEach(u,function(e,t){angular.element.prototype[t]=e;var n=t.replace(/^duScroll/,"scroll");angular.isUndefined(angular.element.prototype[n])&&(angular.element.prototype[n]=e)})}]),angular.module("duScroll.polyfill",[]).factory("polyfill",["$window",function(e){"use strict";var t=["webkit","moz","o","ms"];return function(n,r){if(e[n])return e[n];for(var o,l=n.substr(0,1).toUpperCase()+n.substr(1),i=0;i<t.length;i++)if(o=t[i]+l,e[o])return e[o];return r}}]),angular.module("duScroll.requestAnimation",["duScroll.polyfill"]).factory("requestAnimation",["polyfill","$timeout",function(e,t){"use strict";var n=0,r=function(e){var r=(new Date).getTime(),o=Math.max(0,16-(r-n)),l=t(function(){e(r+o)},o);return n=r+o,l};return e("requestAnimationFrame",r)}]).factory("cancelAnimation",["polyfill","$timeout",function(e,t){"use strict";var n=function(e){t.cancel(e)};return e("cancelAnimationFrame",n)}]),angular.module("duScroll.spyAPI",["duScroll.scrollContainerAPI"]).factory("spyAPI",["$rootScope","$timeout","scrollContainerAPI","duScrollGreedy","duScrollSpyWait",function(e,t,n,r,o){"use strict";var l=function(n){var l=!1,i=!1,u=function(){i=!1;var t=n.container,o=t[0],l=0;("undefined"!=typeof HTMLElement&&o instanceof HTMLElement||o.nodeType&&o.nodeType===o.ELEMENT_NODE)&&(l=o.getBoundingClientRect().top);var u,c,a,d,s,f;for(d=n.spies,c=n.currentlyActive,a=void 0,u=0;u<d.length;u++)s=d[u],f=s.getTargetPosition(),f&&f.top+s.offset-l<20&&-1*f.top+l<f.height&&(!a||a.top<f.top)&&(a={top:f.top,spy:s});a&&(a=a.spy),c===a||r&&!a||(c&&(c.$element.removeClass("active"),e.$broadcast("duScrollspy:becameInactive",c.$element)),a&&(a.$element.addClass("active"),e.$broadcast("duScrollspy:becameActive",a.$element)),n.currentlyActive=a)};return o?function(){l?i=!0:(u(),l=t(function(){l=!1,i&&u()},o,!1))}:u},i={},u=function(e){var t=e.$id,n={spies:[]};return n.handler=l(n),i[t]=n,e.$on("$destroy",function(){c(e)}),t},c=function(e){var t=e.$id,n=i[t],r=n.container;r&&r.off("scroll",n.handler),delete i[t]},a=u(e),d=function(e){return i[e.$id]?i[e.$id]:e.$parent?d(e.$parent):i[a]},s=function(e){var t,n,r=e.$element.scope();if(r)return d(r);for(n in i)if(t=i[n],-1!==t.spies.indexOf(e))return t},f=function(e){for(;e.parentNode;)if(e=e.parentNode,e===document)return!0;return!1},p=function(e){var t=s(e);t&&(t.spies.push(e),t.container&&f(t.container)||(t.container&&t.container.off("scroll",t.handler),t.container=n.getContainer(e.$element.scope()),t.container.on("scroll",t.handler).triggerHandler("scroll")))},m=function(e){var t=s(e);e===t.currentlyActive&&(t.currentlyActive=null);var n=t.spies.indexOf(e);-1!==n&&t.spies.splice(n,1),e.$element=null};return{addSpy:p,removeSpy:m,createContext:u,destroyContext:c,getContextForScope:d}}]),angular.module("duScroll.scrollContainerAPI",[]).factory("scrollContainerAPI",["$document",function(e){"use strict";var t={},n=function(e,n){var r=e.$id;return t[r]=n,r},r=function(e){return t[e.$id]?e.$id:e.$parent?r(e.$parent):void 0},o=function(n){var o=r(n);return o?t[o]:e},l=function(e){var n=r(e);n&&delete t[n]};return{getContainerId:r,getContainer:o,setContainer:n,removeContainer:l}}]),angular.module("duScroll.smoothScroll",["duScroll.scrollHelpers","duScroll.scrollContainerAPI"]).directive("duSmoothScroll",["duScrollDuration","duScrollOffset","scrollContainerAPI",function(e,t,n){"use strict";return{link:function(r,o,l){o.on("click",function(o){if(l.href&&-1!==l.href.indexOf("#")){var i=document.getElementById(l.href.replace(/.*(?=#[^\s]+$)/,"").substring(1));if(i&&i.getBoundingClientRect){o.stopPropagation&&o.stopPropagation(),o.preventDefault&&o.preventDefault();var u=l.offset?parseInt(l.offset,10):t,c=l.duration?parseInt(l.duration,10):e,a=n.getContainer(r);a.duScrollToElement(angular.element(i),isNaN(u)?0:u,isNaN(c)?0:c)}}})}}}]),angular.module("duScroll.spyContext",["duScroll.spyAPI"]).directive("duSpyContext",["spyAPI",function(e){"use strict";return{restrict:"A",scope:!0,compile:function(){return{pre:function(t){e.createContext(t)}}}}}]),angular.module("duScroll.scrollContainer",["duScroll.scrollContainerAPI"]).directive("duScrollContainer",["scrollContainerAPI",function(e){"use strict";return{restrict:"A",scope:!0,compile:function(){return{pre:function(t,n,r){r.$observe("duScrollContainer",function(r){angular.isString(r)&&(r=document.getElementById(r)),r=angular.isElement(r)?angular.element(r):n,e.setContainer(t,r),t.$on("$destroy",function(){e.removeContainer(t)})})}}}}}]),angular.module("duScroll.scrollspy",["duScroll.spyAPI"]).directive("duScrollspy",["spyAPI","duScrollOffset","$timeout","$rootScope",function(e,t,n,r){"use strict";var o=function(e,t,n){angular.isElement(e)?this.target=e:angular.isString(e)&&(this.targetId=e),this.$element=t,this.offset=n};return o.prototype.getTargetElement=function(){return!this.target&&this.targetId&&(this.target=document.getElementById(this.targetId)),this.target},o.prototype.getTargetPosition=function(){var e=this.getTargetElement();return e?e.getBoundingClientRect():void 0},o.prototype.flushTargetCache=function(){this.targetId&&(this.target=void 0)},{link:function(l,i,u){var c,a=u.ngHref||u.href;a&&-1!==a.indexOf("#")?c=a.replace(/.*(?=#[^\s]+$)/,"").substring(1):u.duScrollspy&&(c=u.duScrollspy),c&&n(function(){var n=new o(c,i,-(u.offset?parseInt(u.offset,10):t));e.addSpy(n),l.$on("$destroy",function(){e.removeSpy(n)}),l.$on("$locationChangeSuccess",n.flushTargetCache.bind(n)),r.$on("$stateChangeSuccess",n.flushTargetCache.bind(n))},0,!1)}}}]),angular.module("memry",["ngRoute","duScroll"]),angular.module("memry").config(["$routeProvider",function(e){"use strict";e.when("/",{templateUrl:"views/main.html"})}]),angular.module("memry").controller("DefinitionFormController",["$scope","defModel","scrollToDef",function(e,t,n){"use strict";e.hideDescription=!0,e.titleChange=function(){var r=t.findIDByTitleSubstr(e.title);n.byID(r),e.hideDescription=r||""===e.title},e.titleInputBegin=function(){n.resetID()},e.titleInputEnd=function(){n.resetID()},e.addDefinition=function(){e.title&&e.description&&(t.addDefinition(e.title,e.description),e.title="",e.description="",e.hideDescription=!0)}}]),angular.module("memry").controller("DefinitionListController",["$scope","defModel",function(e,t){"use strict";e.$watch(function(){return t.data.defs},function(n){"undefined"!=typeof n&&(e.definitions=t.data.defs)}),e.turnOnEditMode=function(t){e.definitions.forEach(function(e){e.editMode=!1}),e.definitions[t].editMode=!0},e.turnOffEditMode=function(t){e.definitions[t].editMode=!1},e.editDefinition=function(n,r){e.turnOffEditMode(n),t.editDefinition(r)},e.delDefinition=function(e){t.deleteDefinition(e)}}]),angular.module("memry").controller("MainController",function(){"use strict"}),angular.module("memry").factory("defModel",["$q","defServer",function(e,t){"use strict";function n(){t.getAll().then(function(e){r.data.defs=e.data})}var r={};return r.data={},r.getDefs=function(){var e=t.getAll();return e.then(function(e){r.data.defs=e.data}),e},r.addDefinition=function(e,n){t.create({title:e,description:n}).then(function(e){console.log(e.data),r.getDefs()})},r.editDefinition=function(e){t.update(e).then(function(e){console.log(e.data),r.getDefs()})},r.deleteDefinition=function(e){t.delete(e).then(function(e){console.log(e.data),r.getDefs()})},r.findIDByTitleSubstr=function(e){if("string"!=typeof e)throw new Error("findIDByTitleSubstr requires string input");var t=null;return r.data.defs.forEach(function(n){var r=n.title.indexOf(e);return 0===r?(t=n._id,!0):void 0}),t},n(),r}]),angular.module("memry").factory("defServer",["$http",function(e){"use strict";return{getAll:function(){return e.get("/api/defs")},getOne:function(t){return e.get("/api/defs/"+t)},create:function(t){return e.post("/api/defs",t)},update:function(t){return e.put("/api/defs/"+t._id,t)},"delete":function(t){return e.delete("/api/defs/"+t)}}}]),angular.module("memry").factory("scrollToDef",["$document","defModel",function(e,t){"use strict";var n={},r={};return r.currentScrollDefID=null,n.byID=function(t){if(r.currentScrollDefID!==t){r.currentScrollDefID=t;var n=angular.element(document.getElementById(t));e.scrollTo(n,0,1e3)}},n.byTitle=function(e){if("string"!=typeof e)throw new Error("scrollToDef.byTitle requires string input");if(""!==e){var r=t.findIDByTitleSubstr(e);r&&n.byID(r)}},n.resetID=function(){r.currentScrollDefID=null},n}]);
//# sourceMappingURL=data:application/json;base64,