"use strict";angular.module("memry",["ngRoute"]),angular.module("memry").controller("DefinitionFormController",["$scope","defModel",function(t,e){t.hideDescription=!0,t.titleChange=function(){var n=e.findIDByTitleSubstr(t.title);t.hideDescription=n||""===t.title},t.titleInputBegin=function(){},t.titleInputEnd=function(){},t.addDefinition=function(){t.title&&t.description&&(e.addDefinition(t.title,t.description),t.title="",t.description="",t.hideDescription=!0)}}]),angular.module("memry").controller("DefinitionListController",["$scope","defModel",function(t,e){t.$watch(function(){return e.data.defs},function(n){"undefined"!=typeof n&&(t.definitions=e.data.defs)}),t.turnOnEditMode=function(e){t.definitions.forEach(function(t){t.editMode=!1}),t.definitions[e].editMode=!0},t.turnOffEditMode=function(e){t.definitions[e].editMode=!1},t.editDefinition=function(n,i){t.turnOffEditMode(n),e.editDefinition(i)},t.delDefinition=function(t){e.deleteDefinition(t)}}]),angular.module("memry").controller("MainController",function(){}),angular.module("memry").config(["$routeProvider",function(t){t.when("/",{templateUrl:"views/main.html"})}]),angular.module("memry").factory("defModel",["$q","defServer",function(t,e){function n(){e.getAll().then(function(t){i.data.defs=t.data})}var i={};return i.data={},i.getDefs=function(){var t=e.getAll();return t.then(function(t){i.data.defs=t.data}),t},i.addDefinition=function(t,n){e.create({title:t,description:n}).then(function(t){console.log(t.data),i.getDefs()})},i.editDefinition=function(t){e.update(t).then(function(t){console.log(t.data),i.getDefs()})},i.deleteDefinition=function(t){e.delete(t).then(function(t){console.log(t.data),i.getDefs()})},i.findIDByTitleSubstr=function(t){if("string"!=typeof t)throw new Error("findIDByTitleSubstr requires string input");var e=null;return i.data.defs.forEach(function(n){var i=n.title.indexOf(t);return 0===i?(e=n._id,!0):void 0}),e},n(),i}]),angular.module("memry").factory("defServer",["$http",function(t){return{getAll:function(){return t.get("/api/defs")},getOne:function(e){return t.get("/api/defs/"+e)},create:function(e){return t.post("/api/defs",e)},update:function(e){return t.put("/api/defs/"+e._id,e)},"delete":function(e){return t.delete("/api/defs/"+e)}}}]);
//# sourceMappingURL=data:application/json;base64,